<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=windows-1252">
<link rel="stylesheet" type="text/css" href="doc.css"></link>
<title>FuncDefs</title>
</head>
<body>
<div><h1>Function Definitions</h1>
<p>Function definitions are callbacks that can be passed around.<br/>Consult the <a href="http://www.angelcode.com/angelscript/sdk/docs/manual/doc_callbacks.html">Angelscript documentation</a> for more info.</p>
</div>
<div><h2>FuncDefs</h2>
<table><tr><th>Namespace</th>
<th>Declaration</th>
<th>Description</th>
</tr>
<tr><td>&lt;Global&gt;</td>
<td>bool EntityValidForInclusion(CBaseEntity@ pEntity, CBasePlayer@ pPlayer)</td>
<td>Function used by EntityList to evaluate entities for inclusion in the list</td>
</tr>
<tr><td>&lt;Global&gt;</td>
<td>bool EntityValidForRetrieval(CBaseEntity@ pEntity)</td>
<td>Function used by EntityList to evaluate entities for random retrieval</td>
</tr>
<tr><td>&lt;Global&gt;</td>
<td>void ThinkFunction()</td>
<td>Function definition for custom entity Think functions</td>
</tr>
<tr><td>&lt;Global&gt;</td>
<td>void UseFunction(CBaseEntity@ pActivator, CBaseEntity@ pCaller, USE_TYPE useType, float flValue)</td>
<td>Function definition for custom entity Use functions</td>
</tr>
<tr><td>&lt;Global&gt;</td>
<td>void TouchFunction(CBaseEntity@ pOther)</td>
<td>Function definition for custom entity Touch functions</td>
</tr>
<tr><td>&lt;Global&gt;</td>
<td>void BlockedFunction(CBaseEntity@ pOther)</td>
<td>Function definition for custom entity Blocked functions</td>
</tr>
<tr><td>&lt;Global&gt;</td>
<td>void TextMenuPlayerSlotCallback(CTextMenu@ menu, CBasePlayer@ pPlayer, int iSlot, const CTextMenuItem@ pItem)</td>
<td>Player slot callback for text menus.</td>
</tr>
<tr><td>&lt;Global&gt;</td>
<td>void VoteBlocked(Vote@ pVote, float flTime)</td>
<td>Funcdef for vote blocked callbacks. The given time is when the active vote has ended.</td>
</tr>
<tr><td>&lt;Global&gt;</td>
<td>void VoteEnd(Vote@ pVote, bool fResult, int iVoters)</td>
<td>Funcdef for vote ended callbacks. If fResult is true, users voted for yes. Otherwise, voted for no.</td>
</tr>
<tr><td>&lt;Global&gt;</td>
<td>void ConCommandCallback(const CCommand@ args)</td>
<td>Callback for server console commands.</td>
</tr>
<tr><td>&lt;Global&gt;</td>
<td>void ClientCommandCallback(const CCommand@ args)</td>
<td>Callback for client console commands.</td>
</tr>
<tr><td>&lt;Global&gt;</td>
<td>void CVarCallback(CCVar@ cvar, const string& in szOldValue, float flOldValue)</td>
<td>Callback for cvars.</td>
</tr>
<tr><td>&lt;Global&gt;</td>
<td>HookReturnCode WeaponTertiaryAttackHook(CBasePlayer@, CBasePlayerWeapon@)</td>
<td>FuncDef for hook</td>
</tr>
<tr><td>&lt;Global&gt;</td>
<td>HookReturnCode WeaponSecondaryAttackHook(CBasePlayer@, CBasePlayerWeapon@)</td>
<td>FuncDef for hook</td>
</tr>
<tr><td>&lt;Global&gt;</td>
<td>HookReturnCode WeaponPrimaryAttackHook(CBasePlayer@, CBasePlayerWeapon@)</td>
<td>FuncDef for hook</td>
</tr>
<tr><td>&lt;Global&gt;</td>
<td>HookReturnCode PlayerDecalHook(CBasePlayer@, const TraceResult& in trace)</td>
<td>FuncDef for hook</td>
</tr>
<tr><td>&lt;Global&gt;</td>
<td>HookReturnCode GetPlayerSpawnSpotHook(CBasePlayer@ pPlayer, CBaseEntity@& out ppEntSpawnSpot)</td>
<td>FuncDef for hook</td>
</tr>
<tr><td>&lt;Global&gt;</td>
<td>HookReturnCode PlayerPostThinkHook(CBasePlayer@)</td>
<td>FuncDef for hook</td>
</tr>
<tr><td>&lt;Global&gt;</td>
<td>HookReturnCode PlayerPreThinkHook(CBasePlayer@, uint& out)</td>
<td>FuncDef for hook</td>
</tr>
<tr><td>&lt;Global&gt;</td>
<td>HookReturnCode PlayerUseHook(CBasePlayer@, uint& out)</td>
<td>FuncDef for hook</td>
</tr>
<tr><td>&lt;Global&gt;</td>
<td>HookReturnCode PlayerKilledHook(CBasePlayer@, CBaseEntity@, int)</td>
<td>FuncDef for hook</td>
</tr>
<tr><td>&lt;Global&gt;</td>
<td>HookReturnCode PlayerCanRespawnHook(CBasePlayer@, bool& out)</td>
<td>FuncDef for hook</td>
</tr>
<tr><td>&lt;Global&gt;</td>
<td>HookReturnCode PlayerSpawnHook(CBasePlayer@)</td>
<td>FuncDef for hook</td>
</tr>
<tr><td>&lt;Global&gt;</td>
<td>HookReturnCode ClientConnectedHook(edict_t@, const string& in, const string& in, bool& out, string& out)</td>
<td>FuncDef for hook</td>
</tr>
<tr><td>&lt;Global&gt;</td>
<td>HookReturnCode CanPlayerUseReservedSlotHook(edict_t@, const string& in, const string& in, bool& out)</td>
<td>FuncDef for hook</td>
</tr>
<tr><td>&lt;Global&gt;</td>
<td>HookReturnCode ClientSayHook(SayParameters@)</td>
<td>FuncDef for hook</td>
</tr>
<tr><td>&lt;Global&gt;</td>
<td>HookReturnCode ClientPutInServerHook(CBasePlayer@)</td>
<td>FuncDef for hook</td>
</tr>
<tr><td>&lt;Global&gt;</td>
<td>HookReturnCode ClientDisconnectHook(CBasePlayer@)</td>
<td>FuncDef for hook</td>
</tr>
<tr><td>&lt;Global&gt;</td>
<td>HookReturnCode MapChangeHook()</td>
<td>FuncDef for hook</td>
</tr>
</table>
</div>
</body>
</html>
